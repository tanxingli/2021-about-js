
函数封装以及面向对象

//给div和p添加相同的样式border:1px solid red
		//1.获取div
		// var _div = document.getElementsByTagName('div');
		// console.log(_div);
		//2.遍历
		//3.添加样式
		// for(var i=0;con=_div.length,i<con;i++){
		// 	_div[i].style.border='1px solid red';
		// }
		//1.获取div
		// var _p = document.getElementsByTagName('p');
		// console.log(_div);
		//2.遍历
		//3.添加样式
		// for(var i=0;con=_p.length,i<con;i++){
		// 	_p[i].style.border='1px solid red';
		// }


//函数封装：缺点  全局变量污染 代码结构不清晰，维护不方便

		// var _div = getTag('div');
		// var _p = getTag('p');
		// setStyle(_div);
		// setStyle(_p);
		// function getTag(tag){
		// 	return document.getElementsByTagName(tag)
		// }
		// function setStyle(son){
		// 	for(var i=0;con=son.length,i<con;i++){
		// 		son[i].style.border='1px solid red';
		// 	}
		// }

		//解决方法：面向对象. 缺点：会暴露所有的模块成员，内部状态可以被外部改写 ex:外部代码可以直接改变内部计数器的值
		
		// var obj ={
		// 	_count : 0,
		// 	getTag: function(tag){
		// 		return document.getElementsByTagName(tag)
		// 	},
		// 	setStyle: function(son){
		// 		for(var i=0;con=son.length,i<con;i++){
		// 		son[i].style.border='1px solid red';
		// 		 }
		// 	}
		// }
		// var _div = obj.getTag('div');
		// var _p = obj.getTag('p');
		// obj.setStyle(_div);
		// obj.setStyle(_p);
		// obj._count = 2 ;



// var obj ={
		// 	_count : 0,
		// 	//获取节点的方法集合
		// 	getElent:{
		// 		getTag: function(tag){
		// 			return document.getElementsByTagName(tag)
		// 		},
		// 		getClass: function(tagClass){
		// 			return document.getElementsByClassName(tagClass)
		// 		}

		// 	},
		// 	//设置样式
		// 	setCss:{
		// 		setStyle: function(son){
		// 		for(var i=0;con=son.length,i<con;i++){
		// 		son[i].style.border='1px solid red';
		// 		 }
		// 		}
		// 	}
			
		// }
		// var _div = obj.getElent.getTag('div');
		// var _p = obj.getElent.getTag('p');
		// obj.setCss.setStyle(_div);
		// obj.setCss.setStyle(_p);
		// obj._count = 2 ;






		//解决方法  使用立即执行函数，可以达到不暴露私有成员的目的
		//ps:在es5中 没有块级作用域，因此我们常常使用函数自执行的方式来模仿块级作用域，
		//这样就提供了一个独立的执行上下文

		var obj = ( function (){
			var _count = 0;
			var getTag = function(tag){
              return document.getElementsByTagName(tag)
			};
			var setStyle = function(son){
				for(var i=0;con=son.length,i<con;i++){
				son[i].style.border='1px solid red';
				 }
			};
			return {
				getTag : getTag,
				setStyle : setStyle
			};

		})()
		var _div = obj.getTag('div');
		var _p = obj.getTag('p');
		obj.setStyle(_div);
		obj.setStyle(_p);
		obj._count = 2 ;
		

//有问题 未解决 -----传参有问题
var obj =(function(){
			var _count = 0;
			//获取节点的方法集
			var getElent= function(){
				return function(tag){
					return document.getElementsByTagName(tag)
				};
				var getClass=function(tagClass){
					return document.getElementsByClassName(tagClass)
				}
			
			};
			//设置样式
			var setCss=function(){
				 return function(son){
				for(var i=0,con=son.length;i<con;i++){
				son[i].style.border='1px solid red';
				 }
				}
			}
			return {
				getElent: getElent,
				setCss: setCss
			}
			
		})()
